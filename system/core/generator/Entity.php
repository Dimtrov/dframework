<?php
/**
 * dFramework
 *
 * The simplest PHP framework for beginners
 * Copyright (c) 2019, Dimtrov Sarl
 * This content is released under the Mozilla Public License 2 (MPL-2.0)
 *
 * @package	    dFramework
 * @author	    Dimitri Sitchet Tomkeu <dev.dst@gmail.com>
 * @copyright	Copyright (c) 2019, Dimtrov Sarl. (https://dimtrov.hebfree.org)
 * @copyright	Copyright (c) 2019, Dimitri Sitchet Tomkeu. (https://www.facebook.com/dimtrovich)
 * @license	    https://opensource.org/licenses/MPL-2.0 MPL-2.0 License
 * @link	    https://dimtrov.hebfree.org/works/dframework
 * @version     3.1
 */

 
namespace dFramework\core\generator;

use dFramework\core\dFramework;
use dFramework\core\Entity as CoreEntity;
use dFramework\core\utilities\Chaine;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\Parameter;
use Nette\PhpGenerator\Property;

/**
 * generator\Entity
 *
 * Generate a file for entities class
 *
 * @package		dFramework
 * @subpackage	Core
 * @category    Generator
 * @author		Dimitri Sitchet Tomkeu <dev.dst@gmail.com>
 * @link		https://dimtrov.hebfree.org/docs/dframework/api
 * @since       3.1
 * @file		/system/core/generator/Entity.php
 */

final class Entity extends Generator
{
    
    public function generate(string $class, string $dir = \ENTITY_DIR) 
    {
        $dir = empty($dir) ? \ENTITY_DIR : $dir;
        $class = preg_replace('#Entity$#i', '', $class);

        $this->makeProperties($class, $properties);
        $this->writeProperties($class, $properties, $render);
        $this->createFile($render, $class, $dir);
    }


    /**
     * Cree les proprietes de la classe a partir des champs de la base de donnees
     *
     * @param string $class
     * @param $properties
     * @return array
     */
    private function makeProperties($class, &$properties)
    {
        $properties = [];
        $i = -1;

        $columns = $this->manager->getColumns($class);

        if (!empty($columns))
        {
            foreach ($columns As $column)
            {
                if (!is_object($column))
                {
                    continue;
                }
                $i++;
   
                $properties[$i]['name'] = $column->field;
                $properties[$i]['extra'] = $column->extra ?? null;
                $properties[$i]['null'] = strtolower($column->null ?? '');

                if(preg_match('#^(int|longint|smallint)#i', $column->type))
                {
                    $properties[$i]['type'] = 'int';
                }
                else if(preg_match('#^(varchar|text|char)#i', $column->type))
                {
                    $properties[$i]['type'] = 'string';
                }
                else if(preg_match('#^(decimal|float)#i', $column->type))
                {
                    $properties[$i]['type'] = 'float';
                }
                else if(preg_match('#^(boolean|tinyint)#i', $column->type))
                {
                    $properties[$i]['type'] = 'bool';
                }
                else
                {
                    $properties[$i]['type'] = 'mixed';
                }

                if(isset($column->default) AND (is_numeric($column->default) OR $column->default !== ''))
                {
                    $properties[$i]['default'] = $column->default;
                }
            }
        }
        
        return $properties;
    }

    /**
     * Ecrit les proprietes de la classe, les getters et les setters
     *
     * @param string $class
     * @param array $properties
     * @param $render
     */
    private function writeProperties($class, $properties, &$render)
    {
        $class_name = Chaine::toPascalCase($class).'Entity';
        $generator = new ClassType($class_name);

        $generator 
            ->setExtends(CoreEntity::class)
            ->addComment($class_name."\n")
            ->addComment('Generated by dFramework v'.dFramework::VERSION)
            ->addComment('Date : '.date('r'))
            ->addComment('PHP Version : '.phpversion())
            ->addComment('Entity : '.preg_replace("#Entity$#", '', $class_name));

        $pks = $this->manager->getKeys($class, 'PRI');
        if (!empty($pks))
        {
            $generator->addProperty('pk', $pks)->setProtected()->addComment('@var string[]');
        }
    
        /* Ajout des proprietes de classe */
        $this->addProperties($generator, $properties);

        /* Ajout des functions globales (contructeur et hydratateur) */
        $this->addGlobalFunctions($generator);

        /* Ajout des modificateurs (Getters et Setters) */
        $this->addModifiers($generator, $properties);

        $render = (string) $generator;
    }

    /**
     * Enregistre le code de la classe dans le fichiers
     *
     * @param $render
     * @param string $class
     * @param string $file
     */
    protected function createFile($render, $class, $dir)
    { 
        $class_name = ucfirst(Chaine::toCamelCase($class)).'Entity';

        $dir = str_replace(\ENTITY_DIR, '', $dir);
        $dir = ENTITY_DIR.trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], DS, $dir);
        $dir = rtrim($dir, DS).DS;

        if (!is_dir($dir))
        {
            mkdir($dir);
        }
        $filename  = $dir.$class_name.'.php';
    
        $f = fopen($filename, 'w');
        if (!is_resource($f))
        {
            return false;
            exit("impossible de generer l'entite : ".$class);
        }
        fwrite($f, "<?php \n".$render);
        fclose($f);
    }

    
    
    /**
     * addGlobalFunctions
     *
     * @param  ClassType $generator
     * @return void
     */
    private function addGlobalFunctions(ClassType &$generator)
    {
        // Creation du contructeur
        $m = (new Method('__construct'))
            ->setPublic()
            ->addComment("Constructor \n")
            ->addComment('@param array|null $data')
            ->setParameters([
                (new Parameter('data'))
                ->setNullable()
                ->setDefaultValue([])
                ->setType('array')
            ])
            ->addBody("parent::__construct();")
            ->addBody("if (!empty(\$data)) {\n\t\$this->hydrate(\$data); \n}");
        $generator->addMember($m);

        // Creation de la methode hydrate
        $hydrate  =  "if (!empty(\$data)) { \n";
            $hydrate .= "\tforeach (\$data as \$key => \$value) { \n";
                $hydrate .= "\t\t\$key = self::getProperty(\$key); \n";
                $hydrate .= "\t\t\$method = 'set'.ucfirst(\$key); \n";
                $hydrate .= "\t\tif (method_exists(\$this, \$method)) { \n";
                    $hydrate .= "\t\t\t\$this->{\$method}(\$value);\n";
                $hydrate .= "\t\t} else { \n";
                    $hydrate .= "\t\t\t\$this->{\$key} = \$value; \n";
                $hydrate .= "\t\t}\n";
            $hydrate .= "\t}\n";
        $hydrate .= "}";
        $m = (new Method('hydrate'))
        ->setPublic()
        ->addComment('@param array $data')
        ->setParameters([
            (new Parameter('data'))
            ->setType('array')
        ])
        ->setBody($hydrate);
        $generator->addMember($m);
    }
    
    /**
     * addModifiers
     *
     * @param  ClassType $generator
     * @param  array $properties
     * @return void
     */
    private function addModifiers(ClassType &$generator, array $properties)
    {
        foreach ($properties As $property) 
        {                
            $property = (object) $property;
            $property_name = CoreEntity::getProperty($property->name);
            $property_is_nullable = \in_array($property->null, ['yes', 'YES']);

            // Creation des getters
            $m = (new Method('get'.\ucfirst($property_name)))
                ->setPublic()
                ->addComment('@return '.$property->type.($property_is_nullable ? '|null' : ''));
            if ($property->type !== 'mixed')
            {
                $m->setReturnType($property->type);
                if ($property_is_nullable)
                {
                    $m->setReturnNullable();
                }
            }
            $m->setBody('return $this->'.$property_name.';');
            $generator->addMember($m);
            
            // Creation des setters
            $m = (new Method('set'.\ucfirst($property_name)))
                ->addComment('@param '.$property->type.($property_is_nullable ? '|null' : '').' $'.$property_name)
                ->addComment('@return self')
                ->setReturnType('self')
                ->setPublic();
                $param = new Parameter($property_name);
                if ($property_is_nullable)
                {
                    $param->setDefaultValue(null);
                    $param->setNullable();
                }
                if ($property->type !== 'mixed')
                {
                    $param->setType($property->type);
                }
            $m->setParameters([$param])
                ->addBody('$this->'.$property_name.' = $'.$property_name.';')
                ->addBody('return $this;');
            $generator->addMember($m);
        }
    }
    
    /**
     * addProperties
     *
     * @param  ClassType $generator
     * @param  array $properties
     * @return void
     */
    private function addProperties(ClassType &$generator, array $properties)
    {
        foreach ($properties As $property) 
        {
            $property = (object) $property;
            $property_name = CoreEntity::getProperty($property->name);
            $property_is_nullable = \in_array($property->null, ['yes', 'YES']);

            // Creation des proprietes
            $p = new Property($property_name);
            if (isset($property->default))
            {
                $p->setValue($property->default);
            }
            else if ($property_is_nullable)
            {
                $p->setNullable()->setInitialized();
            }
            if (\version_compare(\phpversion(), '7.4', '>=') AND $property->type !== 'mixed')
            {
                $p->setType($property->type);
            }            
            $p->setProtected();
            $p->addComment('@var '.$property->type.($property_is_nullable ? '|null' : ''));
            $generator->addMember($p);
        }
    }
}
