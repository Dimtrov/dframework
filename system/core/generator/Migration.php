<?php
/**
 * dFramework
 *
 * The simplest PHP framework for beginners
 * Copyright (c) 2019 - 2021, Dimtrov Lab's
 * This content is released under the Mozilla Public License 2 (MPL-2.0)
 *
 * @package	    dFramework
 * @author	    Dimitri Sitchet Tomkeu <dev.dst@gmail.com>
 * @copyright	Copyright (c) 2019 - 2021, Dimtrov Lab's. (https://dimtrov.hebfree.org)
 * @copyright	Copyright (c) 2019 - 2021, Dimitri Sitchet Tomkeu. (https://www.facebook.com/dimtrovich)
 * @license	    https://opensource.org/licenses/MPL-2.0 MPL-2.0 License
 * @link	    https://dimtrov.hebfree.org/works/dframework
 * @version     3.3.0
 */
 
namespace dFramework\core\generator;

use dFramework\core\db\Migration as DbMigration;
use dFramework\core\db\migration\Schema;
use dFramework\core\dFramework;
use dFramework\core\utilities\Str;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\PhpFile;

/**
 * generator\Migration
 *
 * Generate a file for migration class
 *
 * @package		dFramework
 * @subpackage	Core
 * @category    Generator
 * @author		Dimitri Sitchet Tomkeu <dev.dst@gmail.com>
 * @link		https://dimtrov.hebfree.org/docs/dframework/api
 * @since       3.3.0
 * @file		/system/core/generator/Migration.php
 */
final class Migration extends Generator
{
    /**
     * @var string
     */
    private $table = null;
    /**
     * @var string
     */
    private $action = null;


    public function generate(string $class, string $dir = \MIGRATION_DIR) 
    {
        $dir = empty($dir) ? \MIGRATION_DIR : $dir;
        
        $this->write($class, $render);
        
        return $this->createFile($render, $class, $dir);
    }

    public function doModify(string $table) 
    {
        $this->table = $table;
        $this->action = 'modified';
    }
    public function doCreate(string $table) 
    {
        $this->table = $table;
        $this->action = 'created';
    }


    /**
     * Ecrit les proprietes de la classe, les getters et les setters
     *
     * @param string $class
     * @param array $properties
     * @param $render
     */
    private function write($class, &$render)
    {
        $class_name = Str::toPascalCase($class);
        $generator = new ClassType($class_name);
        $generator 
            ->setExtends('Migration')
            ->addComment($class_name."\n")
            ->addComment('Generated by dFramework v'.dFramework::VERSION)
            ->addComment('Date : '.date('r'))
            ->addComment('PHP Version : '.phpversion())
            ->addComment('Migration : '.Str::toSnakeCase($class));

        /* Ajout des methodes (up et down) */
        $this->addMethods($generator);

        $render = (string) $generator;
    }

    /**
     * Enregistre le code de la classe dans le fichiers
     *
     * @param $render
     * @param string $class
     * @param string $file
     */
    protected function createFile($render, $class, $dir) : string
    { 
        $class_name = date('YmdHis').'-'.Str::toSnakeCase($class);

        $dir = str_replace(\MIGRATION_DIR, '', $dir);
        $dir = MIGRATION_DIR.trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], DS, $dir);
        $dir = rtrim($dir, DS).DS;

       
        if (!is_dir($dir))
        {
            mkdir($dir);
        }
        $filename  = $dir.$class_name.'.php';
    
        $f = fopen($filename, 'w');
        if (!is_resource($f))
        {
            return false;
            exit("impossible de generer la migration : ".$class);
        }

        $file = new PhpFile;
        $file->addUse(DbMigration::class)
            ->addUse(Schema::class);

        fwrite($f, $file."\n".$render);
        fclose($f);

        return $class_name;
    }
    
    
    /**
     * addMethods
     *
     * @param  ClassType $generator
     * @return void
     */
    private function addMethods(ClassType &$generator)
    {
        $generator->addMember($this->addUp());
        $generator->addMember($this->addDown());
    }


    /**
     * Add Up method
     *
     * @return Method
     */
    private function addUp() : Method
    {
        $m = (new Method('up'))
            ->setPublic()
            ->addComment("Run the migrations. \n\n @return void");
        
        $body = '//';
        if (!empty($this->table) AND $this->action === 'created') 
        {
            $body = "\$this->create('".$this->table."', function(Schema \$schema) { \n ";
                $body .= "\t// \n";
            $body .= "});";
        }
        if (!empty($this->table) AND $this->action === 'modified') 
        {
            $body = "\$this->modify('".$this->table."', function(Schema \$schema) { \n ";
                $body .= "\t// \n";
            $body .= "});";
        }
        $m->setBody($body);

        return $m;
    }

    /**
     * Add Down method
     *
     * @return Method
     */
    private function addDown() : Method
    {
        $m = (new Method('down'))
            ->setPublic()
            ->addComment("Reverse the migrations. \n\n @return void");
        
        $body = '//';
        if (!empty($this->table) AND $this->action === 'created') 
        {
            $body = "\$this->dropIfExists('".$this->table."');";
        }
        if (!empty($this->table) AND $this->action === 'modified') 
        {
            $body = "\$this->modify('".$this->table."', function(Schema \$schema) { \n ";
                $body .= "\t// \n";
            $body .= "});";
        }
        $m->setBody($body);

        return $m;
    }
}
