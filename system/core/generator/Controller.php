<?php
/**
 * dFramework
 *
 * The simplest PHP framework for beginners
 * Copyright (c) 2019 - 2021, Dimtrov Lab's
 * This content is released under the Mozilla Public License 2 (MPL-2.0)
 *
 * @package     dFramework
 * @author      Dimitri Sitchet Tomkeu <devcode.dst@gmail.com>
 * @copyright   Copyright (c) 2019 - 2021, Dimtrov Lab's. (https://dimtrov.hebfree.org)
 * @copyright   Copyright (c) 2019 - 2021, Dimitri Sitchet Tomkeu. (https://www.facebook.com/dimtrovich)
 * @license     https://opensource.org/licenses/MPL-2.0 MPL-2.0 License
 * @link        https://dimtrov.hebfree.org/works/dframework
 * @version     3.4.0
 */

namespace dFramework\core\generator;

use RuntimeException;
use Nette\PhpGenerator\Method;
use dFramework\core\dFramework;
use Nette\PhpGenerator\ClassType;
use dFramework\core\utilities\Str;
use Nette\PhpGenerator\PhpNamespace;
use dFramework\core\controllers\ApplicationController;
use dFramework\core\controllers\RestController;
use dFramework\core\support\traits\CliMessage;

/**
 * generator\Controller
 *
 * Generate a file for CRUD controller class
 *
 * @package     dFramework
 * @subpackage  Core
 * @category    Generator
 * @author      Dimitri Sitchet Tomkeu <devcode.dst@gmail.com>
 * @link        https://dimtrov.hebfree.org/docs/dframework/api
 * @since       3.1
 * @file        /system/core/generator/Controller.php
 */
final class Controller
{
    use CliMessage;
    /**
     * @var string Type de controleur a generer
     */
    private $type = null;
    /**
     * @var string Classe a generer
     */
    private $class = '';
    /**
     * @var string Nom complet de la classe généré (namespace y compris)
     */
    private $full_class_name = '';
    /**
     * @var string Dossier de sauvegarde
     */
    private $dir = '';


    /**
     * Constructor
     *
     * @param [type] $resource
     * @param [type] $presenter
     */
    public function __construct($resource = null, $presenter = null)
    {
        if (!empty($resource))
        {
            $this->type = 'resource';
        }
        else if (!empty($presenter))
        {
            $this->type = 'presenter';
        }
		helper('inflector');
    }


    /**
     * Demarre la generation
     *
     * @param string $class
     * @param string $dir
     * @return string
     */
    public function generate(string $class, ?string $dir = \CONTROLLER_DIR) : string
    {
        $dir = empty($dir) ? \CONTROLLER_DIR : $dir;
        $this->class = preg_replace('#Controller$#i', '', $class);

        $this->writeProperties($dir, $render);
        $this->createFile($render);

        return $this->full_class_name;
    }

    /**
     * Ecrit les proprietes de la classe, les getters et les setters
     *
     * @param string $class
     * @param array $properties
     * @param $render
     */
    protected function writeProperties($dir, &$render)
    {
        $dir = str_replace(\CONTROLLER_DIR, '', $dir);
        $dir = trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], '/', $dir);
        $dir = rtrim($dir, '/');

        if (!empty($dir))
        {
            $namespace = new PhpNamespace(str_replace('/', '\\', $dir));
        }
        $this->dir = $dir . (empty($dir) ? '' : '/');

        $class_name = Str::toPascalCase(plural($this->class)).'Controller';
        $generator = (new ClassType($class_name, $namespace ?? null))
            ->addComment($class_name."\n")
            ->addComment('Generated by dFramework v'.dFramework::VERSION)
            ->addComment('Date : '.date('r'))
            ->addComment('PHP Version : '.phpversion())
            ->addComment('Controller : '.preg_replace("#Controller$#", '', $class_name));

        if ($this->type === 'resource')
        {
            $generator->setExtends(RestController::class);
        }
        else
        {
            $generator->setExtends(ApplicationController::class);
        }
        if (!empty($this->type))
        {
            /* Ajout de la methode de lecture (R) */
            $this->addIndexMethod($generator);

            /* Ajout de la methode de creation (C)*/
            $this->addCreateMethod($generator);

            /* Ajout de la methode de modification (U)*/
            $this->addUpdateMethod($generator);

            /* Ajout de la methode de supression (D)*/
            $this->addDeleteMethod($generator);
        }
        $this->full_class_name = implode('\\', [$namespace ?? '', $class_name]);

        $render = (string) $generator;
    }

    /**
     * Enregistre le code de la classe dans le fichiers
     *
     * @param $render
     */
    protected function createFile($render)
    {
        $class_name = Str::toPascal(plural($this->class)).'Controller';

        $dir = str_replace(\CONTROLLER_DIR, '', $this->dir);
        $dir = CONTROLLER_DIR.trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], DS, $dir);
        $dir = rtrim($dir, DS).DS;

        $this->dir = $dir;
        if (!is_dir($this->dir))
        {
            mkdir($this->dir);
        }
        $filename  = $this->dir.$class_name.'.php';
        $f = fopen($filename, 'w');
        if (!is_resource($f))
        {
            throw new RuntimeException('impossible de generer le contrôleur: '.$this->class);
        }

        fwrite($f, "<?php \n".$render);
        fclose($f);
    }

    /**
     * Ajout de la methode de listing (index & show)
     *
     * @param ClassType $generator
     * @return void
     */
    private function addIndexMethod(ClassType &$generator)
    {
        $class = singular($this->class);

        $message = 'You can access this page via the URL /'.$this->dir.plural($this->class);
        $method = (new Method('index'))->setPublic();
        if ($this->type === 'presenter')
        {
            $method->addComment('Showing all array of '.plural($class).' objects');
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Display a listing of the '.$class)->setBody("\$this->allowed_methods('get')->checkProcess(); \n");
        }
        $method->addComment('HTTP GET: '.$message);
        $generator->addMember($method);

        $message = 'You can access this page via the URL /'.$this->dir.$this->class;
        $method = (new Method('show'))->setPublic();
        $method->addParameter('id');
        if ($this->type === 'presenter')
        {
            $method->addComment('Showing a specific '.$class.' object, all properties');
            $message .= '/show/{id}';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Display the specified '.$class)->setBody("\$this->allowed_methods('get')->checkProcess(); \n");
            $message .= '/{id}';
        }
        $method->addComment('HTTP GET: '.$message)->addComment("\n@param int \$id");
        $generator->addMember($method);
    }
    /**
     * Ajout des methode de creation (new & create)
     *
     * @param ClassType $generator
     * @return void
     */
    private function addCreateMethod(ClassType &$generator)
    {
        $class = singular($this->class);

        $message = 'You can access this page via the URL /'.$this->dir.plural($this->class);
        $method = (new Method('new'))->setPublic();
        if ($this->type === 'presenter')
        {
            $method->addComment('Showing a form for an empty '.$class.' object, with default properties');
            $message .= '/new';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Show the form for creatin a new '.$class)->setBody("\$this->allowed_methods('get')->checkProcess(); \n");
            $message .= '/new';
        }
        $method->addComment('HTTP GET: '.$message);
        $generator->addMember($method);

        $message = 'You can access this page via the URL /'.$this->dir.$this->class;
        $method = (new Method('create'))->setPublic();
        if ($this->type === 'presenter')
        {
            $method->addComment('Processing the form for a new '.$class);
            $message .= '/create';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Store a newly created '.$class.' in storage')->setBody("\$this->allowed_methods('post')->checkProcess(); \n");
        }
        $method->addComment('HTTP POST: '.$message);
        $generator->addMember($method);
    }
    /**
     * Ajout des methodes de modification (edit & update)
     *
     * @param ClassType $generator
     * @return void
     */
    private function addUpdateMethod(ClassType &$generator)
    {
        $class = singular($this->class);

        $message = 'You can access this page via the URL /'.$this->dir.plural($this->class);
        $method = (new Method('edit'))->setPublic();
        $method->addParameter('id');
        if ($this->type === 'presenter')
        {
            $method->addComment('Show an editing form for a specific '.$class.' object, editable properties');
            $message .= '/edit/{id}';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Show the form for editing the specified '.$class)->setBody("\$this->allowed_methods('get')->checkProcess(); \n");
            $message  .= '/{id}/edit';
        }
        $method->addComment('HTTP GET: '.$message)->addComment("\n@param int \$id");
        $generator->addMember($method);

        $message = 'You can access this page via the URL /'.$this->dir.$this->class;
        $method = (new Method('update'))->setPublic();
        $method->addParameter('id');
        if ($this->type === 'presenter')
        {
            $method->addComment('Process the editing form data');
            $message .= '/update/{id}';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Update the specified '.$class.' in storage')->setBody("\$this->allowed_methods('put', 'patch')->checkProcess(); \n");
            $message .= '/{id}';
        }
        $method->addComment('HTTP '.($this->type === 'presenter' ? 'POST' : 'PUT/PATCH').': '.$message)->addComment("\n@param int \$id");
        $generator->addMember($method);
    }
     /**
     * Ajout des methodes de suppression (remove & delete)
     *
     * @param ClassType $generator
     * @return void
     */
    private function addDeleteMethod(ClassType &$generator)
    {
        $class = singular($this->class);

        if ($this->type === 'presenter')
        {
            $method = (new Method('remove'))->setPublic();
            $method->addParameter('id');
            $method->addComment('Show a form to confirm deletion of a specific '.$class.' object');
            $method->addComment('HTTP GET: You can access this page via the URL /'.$this->dir.plural($this->class).'/remove/{id}')->addComment("\n@param int \$id");
            $generator->addMember($method);
        }

        $message = 'You can access this page via the URL /'.$this->dir.plural($this->class);
        $method = (new Method('delete'))->setPublic();
        $method->addParameter('id');
        if ($this->type === 'presenter')
        {
            $method->addComment('Deleting the specified '.$class);
            $message .= '/delete/{id}';
        }
        if ($this->type === 'resource')
        {
            $method->addComment('Remove the specified '.$class.' in storage')->setBody("\$this->allowed_methods('delete')->checkProcess(); \n");
            $message .= '/{id}';
        }
        $method->addComment('HTTP '.($this->type === 'presenter' ? 'POST' : 'DELETE').': '.$message)->addComment("\n@param int \$id \n");
        $generator->addMember($method);
    }
}
