<?php
/**
 * dFramework
 *
 * The simplest PHP framework for beginners
 * Copyright (c) 2019, Dimtrov Sarl
 * This content is released under the Mozilla Public License 2 (MPL-2.0)
 *
 * @package     dFramework
 * @author      Dimitri Sitchet Tomkeu <dev.dimitrisitchet@gmail.com>
 * @copyright   Copyright (c) 2019, Dimtrov Sarl. (https://dimtrov.hebfree.org)
 * @copyright   Copyright (c) 2019, Dimitri Sitchet Tomkeu. (https://www.facebook.com/dimtrovich)
 * @license     https://opensource.org/licenses/MPL-2.0 MPL-2.0 License
 * @link        https://dimtrov.hebfree.org/works/dframework
 * @version     3.1
 */

 
namespace dFramework\core\generator;

use dFramework\components\rest\Controller as RestController;
use dFramework\core\Controller as CoreController;
use dFramework\core\dFramework;
use dFramework\core\loader\Load;
use dFramework\core\utilities\Chaine;
use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\Method;
use Nette\PhpGenerator\Parameter;

/**
 * generator\Controller
 *
 * Generate a file for CRUD controller class
 *
 * @package     dFramework
 * @subpackage  Core
 * @category    Generator
 * @author      Dimitri Sitchet Tomkeu <dev.dimitrisitchet@gmail.com>
 * @link        https://dimtrov.hebfree.org/docs/dframework/api
 * @since       3.1
 * @file        /system/core/generator/Controller.php
 */

final class Controller extends Generator
{
    CONST SIMPLE_CONTROLLER = 1;
    CONST REST_CONTROLLER = 2;

    public function __construct()
    {
        parent::__construct();
        Load::helper('inflector');    
    }

    public function generate(string $class, int $controller_type = self::SIMPLE_CONTROLLER, string $dir = \CONTROLLER_DIR) 
    {
        $dir = empty($dir) ? \CONTROLLER_DIR : $dir;
        $class = preg_replace('#Controller$#i', '', $class);

        $this->writeProperties($class, $controller_type, $dir, $render);
        $this->createFile($render, $class, $dir);
    }


      /**
     * Ecrit les proprietes de la classe, les getters et les setters
     *
     * @param string $class
     * @param array $properties
     * @param $render
     */
    protected function writeProperties($class, $controller_type, $dir, &$render)
    {
        $dir = str_replace(\CONTROLLER_DIR, '', $dir);
        $dir = trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], '/', $dir);
        $dir = rtrim($dir, '/');
        $dir .= empty($dir) ? '' : '/';
        
        $class_name = Chaine::toPascalCase($class).'Controller';
        $generator = (new ClassType($class_name))
            ->addComment($class_name."\n")
            ->addComment('Generated by dFramework v'.dFramework::VERSION)
            ->addComment('Date : '.date('r'))
            ->addComment('PHP Version : '.phpversion())
            ->addComment('Controller : '.preg_replace("#Controller$#", '', $class_name));
        if ($controller_type === self::SIMPLE_CONTROLLER) 
        {
            $generator->setExtends(CoreController::class);
        }
        else 
        {
            $generator->setExtends(RestController::class);
        }
        $attrs = $this->manager->getAttrs($class);
        $pks = $this->manager->getKeys($class, 'PRI');
        $fks = $this->manager->getFks($class);
        $attrs_without_keys = \array_map(function($v) use($pks) {
            if(!in_array($v, $pks) AND !empty($v)) {
                return $v;
            }
        }, $attrs);

        $plural_class = plural($class);
        $singular_class = singular($class);

        $variables = compact(
            'class', 'controller_type', 'dir', 
            'attrs_without_keys', 'attrs',
            'pks', 'fks',
            'plural_class', 'singular_class'
        );

        /* Ajout de la methode index */
        $this->addIndexMethod($generator, $variables);
        
        /* Ajout de la methode de creation (C)*/
        $this->addCreateMethod($generator, $variables);

        /* Ajout de la methode des details (R)*/
        $this->addDetailsMethod($generator, $variables);

        /* Ajout de la methode de modification (U)*/
        $this->addUpdateMethod($generator, $variables);

        /* Ajout de la methode de supression (D)*/
        $this->addDeleteMethod($generator, $variables);


        $render = (string) $generator;
    }

    /**
     * Enregistre le code de la classe dans le fichiers
     *
     * @param $render
     * @param string $class
     * @param string $file
     */
    protected function createFile($render, $class, $dir)
    {
        $class_name = ucfirst(Chaine::toCamelCase($class)).'Controller';

        $dir = str_replace(\CONTROLLER_DIR, '', $dir);
        $dir = CONTROLLER_DIR.trim($dir, '/\\');
        $dir = str_replace(['/', '\\'], DS, $dir);
        $dir = rtrim($dir, DS).DS;

        if (!is_dir($dir))
        {
            mkdir($dir);
        }
        $filename  = $dir.$class_name.'.php';
    
        $f = fopen($filename, 'w');
        if (!is_resource($f))
        {
            return false;
            exit("impossible de generer le model: ".$class);
        }
        fwrite($f, "<?php \n".$render);
        fclose($f);
    }



    private function addIndexMethod(ClassType &$generator, array $variables)
    {
        if ($variables['controller_type'] === self::SIMPLE_CONTROLLER)
        {
            $this->_addIndexSimple($generator, $variables);
        }
        else 
        {
            $this->_addIndexRest($generator, $variables);
        }
    }
    private function _addIndexSimple(ClassType &$generator, array $variables)
    {
        \extract($variables);

        $body_method  = "\$datas = []; \n";
        $body_method .= "\$datas['".$plural_class."'] = ";
        $body_method .= (\count($fks) > 0) ? "\$this->model->read_join();" : "\$this->model->read();";
        
        $body_method .= "\nif (empty(\$datas['".$plural_class."'])) { \n";
            $body_method .= "\t// Aucun(e) ".$singular_class." trouvé(e) en base de données \n";
            $body_method .= "\t// Traitements appropriés \n";
        $body_method .= "} else { \n";
            $body_method .= "\t// 1 ou plusieurs ".$plural_class." trouvé(e)s en base de données \n";
            $body_method .= "\t// Traitements appropriés \n";
        $body_method .= "} \n";
        $body_method .= "\$this->view('index', \$datas)->render(); \n";
        $body_method .= "// Vous pouvez plutot ajouter la view au layout \n";
        $body_method .= "// \$this->layout->add('index', \$datas)->launch(); \n";
            
        $m = (new Method('index'))
            ->setPublic()
            ->addComment("Accueil des ".$plural_class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class." \n")
            ->setBody($body_method);
        $generator->addMember($m);
    }
    private function _addIndexRest(ClassType &$generator, array $variables)
    {
        \extract($variables);

        $body_method  = "\$args = func_get_args(); \n";
        $body_method .= "switch(strtolower(\$this->request->method())) { \n";
            $body_method .= "\tcase 'post': \n\t return call_user_func_array([\$this, 'create'], \$args); \n";
            $body_method .= "\tcase 'get': \n\t return call_user_func_array([\$this, 'read'], \$args); \n";
            $body_method .= "\tcase 'put': \n\t return call_user_func_array([\$this, 'update'], \$args); \n";
            $body_method .= "\tcase 'delete': \n\t return call_user_func_array([\$this, 'delete'], \$args); \n";
            $body_method .= "\tdefault: \n";
                $body_method .= "\t\t// Vous pouvez faire un autre traitement ici \n";
                $body_method .= "\t\t// Par exemple : \$this->send_error('Unauthorized access method', self::HTTP_METHOD_NOT_ALLOWED); \n";
            $body_method .= "\tbreak; \n";
        $body_method .= "} \n";
            
        $m = (new Method('index'))
            ->setPublic()
            ->addComment("Redirection des ".$plural_class." en fonction de la methode d'appel du service web")
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class." \n")
            ->setBody($body_method);
        $generator->addMember($m);
    }

    private function addCreateMethod(ClassType &$generator, array $variables)
    {
        if ($variables['controller_type'] === self::SIMPLE_CONTROLLER)
        {
            $this->_addCreateSimple($generator, $variables);
        }
        else 
        {
            $this->_addCreateRest($generator, $variables);
        }
    }
    private function _addCreateSimple(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $attr = trim(join(',', array_map(function($v){if(!empty($v)) return "'$v'"; }, $attrs_without_keys)), ',');

        $body_method  = "\$datas = []; \n";
        $body_method .= "// Traitements quelconques \n";
        $body_method .= "if(\$this->request->is('post')) { \n";
            $body_method .= "\ttry { \n";
                $body_method .= "\t\t\$post = \$this->request->data; \n";
                $body_method .= "\t\tforeach(\$post as \$key => \$value) { \n";
                    $body_method .= "\t\t\tif(!in_array(\$key, [".$attr."])) { unset(\$post[\$key]); } \n";
                $body_method .= "\t\t} \n";
                $body_method .= "\t\t\$this->loadLibrary('Checker'); \n";
                $body_method .= "\t\t\$this->checker->useInputField(true, \$post); \n";
                $body_method .= "\t\tif(!\$this->checker->inField(".$attr.")) { \n";
                    $body_method .= "\t\t\t// Champs incomplets \n";
                    $body_method .= "\t\t\t// Traitements appropriés \n";
                    $body_method .= "\t\t\t\$datas['errors'] = 'Veuillez remplir tous les champs suivants : ".str_replace('\'', '', $attr)."'; \n";
                $body_method .= "\t\t} else { \n";
                    $body_method .= "\t\t\t$".$pks[0]." = \$this->model->create(\$post); \n";
                    $body_method .= "\t\t\tredirect(\"".$class."/details/$".$pks[0]."\"); \n";
                $body_method .= "\t\t} \n";
            $body_method .= "\t} \n";
            $body_method .= "\tcatch(\Exception \$e) { \n";
                $body_method .= "\t\t// Une erreur s'est produite lors de la creation \n";
                $body_method .= "\t\t// Traitements appropriés: var_dump(\$e); \n";
            $body_method .= "\t} \n";
        $body_method .= "} \n";
        $body_method .= "// Traiments quelconques \n";
        $body_method .= "\$this->view('add', \$datas)->render(); \n";
        $body_method .= "// Vous pouvez plutot ajouter la vue au layout \n";
        $body_method .= "// \$this->layout->add('add', \$datas)->launch(); \n";
            
        $m = (new Method('add'))
            ->setPublic()
            ->addComment("Ajout d'un element dans la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/add \n")
            ->setBody($body_method);
        $generator->addMember($m);
    }
    private function _addCreateRest(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $attr = trim(join(',', array_map(function($v){if(!empty($v)) return "'$v'"; }, $attrs_without_keys)), ',');

        $body_method  = "\$this->allowed_methods('post')->checkProcess(); \n";
        $body_method .= "\$post = \$this->request->data; \n";
        $body_method .= "try { \n";
            $body_method .= "\tforeach (\$post as \$key => \$value) { \n";
                $body_method .= "\t\tif (!in_array(\$key, [".$attr."])) { unset(\$post[\$key]); } \n";
            $body_method .= "\t} \n";
            $body_method .= "\t\$this->loadLibrary('Checker'); \n";
            $body_method .= "\t\$this->checker->useInputField(true, \$post); \n";
            $body_method .= "\tif (!\$this->checker->inField(".$attr.")) { \n";
                $body_method .= "\t\t\$this->response([ \n";
                    $body_method .= "\t\t\t'success' => false, \n";
                    $body_method .= "\t\t\t'message' => 'Veuillez remplir tous les champs suivants : ".str_replace('\'', '', $attr)."' \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t$".$pks[0]." = \$this->model->create(\$post);\n";
            $body_method .= "\t\$this->response([ \n";
                $body_method .= "\t\t'success' => true, \n";
                $body_method .= "\t\t'message' => '".$singular_class." ajouté(e) avec succès', \n";
                $body_method .= "\t\t'result' => ['".$pks[0]."' => $".$pks[0]."] \n";
                $body_method .= "\t]); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la creation \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
            $body_method .= "\t\$this->send_error(\$e->getMessage(), self::HTTP_INTERNAL_ERROR); \n";
        $body_method .= "} \n";
            
        $m = (new Method('create'))
            ->setPublic()
            ->addComment("Creation d'un element dans la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/create")
            ->addComment("Vous accederez a cette page par la méthode POST \n")
            ->setBody($body_method);
        $generator->addMember($m);
    }
    

    private function addDetailsMethod(ClassType &$generator, array $variables)
    {
        if ($variables['controller_type'] === self::SIMPLE_CONTROLLER)
        {
            $this->_addDetailsSimple($generator, $variables);
        }
        else 
        {
            $this->_addDetailsRest($generator, $variables);
        }
    }
    private function _addDetailsSimple(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');

        $body_method  = "\$datas = []; \n";
        $body_method .= "\$datas['".$singular_class."'] = ";
        $body_method .= (\count($fks) > 0) ? "\$this->model->read_join_pk(".trim($args).");" : "\$this->model->read_pk(".trim($args).");";
        $body_method .= "\nif (empty(\$datas['".$singular_class."'])) { \n";
            $body_method .= "\t// Aucun(e) ".$singular_class." correspondant(e) en base de données \n";
            $body_method .= "\t// Traitements appropriés \n";
        $body_method .= "} else { \n";
            $body_method .= "\t// Element trouvé \n";
            $body_method .= "\t// Traitements appropriés \n";
        $body_method .= "} \n";
        $body_method .= "\$this->view('details', \$datas)->render(); \n";
        $body_method .= "// Vous pouvez plutot ajouter la vue au layout \n";
        $body_method .= "// \$this->layout->add('details', \$datas)->launch(); \n";
            
        $m = (new Method('details'))
            ->setPublic()
            ->addComment("Details d'un element de la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/details/{".join('/', $pks)."} \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed $'.$pk);
            $params[] = new Parameter($pk);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);
    }
    private function _addDetailsRest(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');
      
        $body_method  = "\$this->allowed_methods('get')->checkProcess(); \n";
        $body_method .= "\$only_one = false; \n";
        $body_method .= "\$args = func_get_args(); \n";
        $body_method .= "foreach (\$args as \$arg) { \n";
            $body_method .= "\tif (!empty(\$arg)) { \$only_one = true; break; } \n";
        $body_method .= "} \n";
        $body_method .= "try { \n";
            $body_method .= "\tif (\$only_one) { \n";
                $body_method .= "\t\t$".$singular_class." = ";
                $body_method .= (\count($fks) > 0) ? "\$this->model->read_join_pk(".trim($args).");" : "\$this->model->read_pk(".trim($args).");";
                $body_method .= "\n\t\tif (empty($".$singular_class.")) { \n";
                    $body_method .= "\t\t\t// Aucun(e) ".$singular_class." correspondant(e) en base de données \n";
                    $body_method .= "\t\t\t// Traitements appropriés \n";
                    $body_method .= "\t\t\treturn \$this->response([ \n";
                        $body_method .= "\t\t\t\t'success' => false, \n";
                        $body_method .= "\t\t\t\t'message' => 'Aucun(e) ".$singular_class." ne correspond aux arguments envoyés. Verifier ".trim($args)."' \n";
                    $body_method .= "\t\t\t]); \n";
                $body_method .= "\t\t} \n";
                $body_method .= "\t\t// Element trouvé \n";
                $body_method .= "\t\t// Traitements appropriés \n";
                $body_method .= "\t\treturn \$this->response([ \n";
                    $body_method .= "\t\t\t'success' => true, \n";
                    $body_method .= "\t\t\t'message' => 'Informations demandées', \n";
                    $body_method .= "\t\t\t'results' => $".$singular_class." \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t$".$plural_class." = ";
            $body_method .= (\count($fks) > 0) ? "\$this->model->read_join();" : "\$this->model->read();";
            $body_method .= "\n\tif (empty($".$plural_class.")) { \n";
                $body_method .= "\t\t// Aucun(e) ".$singular_class." enregistré(e) en base de données \n";
                $body_method .= "\t\t// Traitements appropriés \n";
                $body_method .= "\t\treturn \$this->response([ \n";
                    $body_method .= "\t\t\t'success' => false, \n";
                    $body_method .= "\t\t\t'message' => 'Aucun(e) ".$singular_class." disponible pour le moment' \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t// Elements trouvé \n";
            $body_method .= "\t// Traitements appropriés \n";
            $body_method .= "\treturn \$this->response([ \n";
                $body_method .= "\t\t'success' => true, \n";
                $body_method .= "\t\t'message' => 'Liste des ".$plural_class." disponibles en base de données', \n";
                $body_method .= "\t\t'results' => $".$plural_class." \n";
            $body_method .= "\t]); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la modification \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
            $body_method .= "\t\$this->send_error(\$e->getMessage(), self::HTTP_INTERNAL_ERROR); \n";
        $body_method .= "} \n";
            
        $m = (new Method('read'))
            ->setPublic()
            ->addComment("Listing d'un/plusieurs element dans la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/read ou /".$dir.$class."/read/{".join('/', $pks)."}")
            ->addComment("Vous accederez a cette page par la methode GET \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed|null $'.$pk);
            $params[] = (new Parameter($pk))->setNullable()->setDefaultValue(null);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);
    }


    private function addUpdateMethod(ClassType &$generator, array $variables)
    {
        if ($variables['controller_type'] === self::SIMPLE_CONTROLLER)
        {
            $this->_addUpdateSimple($generator, $variables);
        }
        else 
        {
            $this->_addUpdateRest($generator, $variables);
        }
    }
    private function _addUpdateSimple(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');
        $attr = trim(join(',', array_map(function($v){if(!empty($v)) return "'$v'"; }, $attrs_without_keys)), ',');

        $body_method  = "\$datas = []; \n";
        $body_method .= "\$datas['".$singular_class."'] = \$this->model->read_pk(".trim($args)."); \n";
        $body_method .= "if (empty(\$datas['".$singular_class."'])) { \n";
            $body_method .= "\t// Aucun(e) ".$singular_class." correspondant(e) en base de données \n";
            $body_method .= "\t// Traitements appropriés \n";
        $body_method .= "} else { \n";
            $body_method .= "\t// Element trouvé \n";
            $body_method .= "\t// Traitements appropriés \n";
            $body_method .= "\tif(\$this->request->is('post')) { \n";
                $body_method .= "\t\ttry { \n";
                    $body_method .= "\t\t\t\$post = \$this->request->data; \n";
                    $body_method .= "\t\t\tforeach(\$post as \$key => \$value) { \n";
                        $body_method .= "\t\t\t\tif(!in_array(\$key, [".$attr."])) { unset(\$post[\$key]); } \n";
                    $body_method .= "\t\t\t} \n";
                    $body_method .= "\t\t\t\$this->loadLibrary('Checker'); \n";
                    $body_method .= "\t\t\t\$this->checker->useInputField(true, \$post); \n";
                    $body_method .= "\t\t\tif(!\$this->checker->inField(".$attr.")) { \n";
                        $body_method .= "\t\t\t\t// Champs incomplets \n";
                        $body_method .= "\t\t\t\t// Traitements appropriés \n";
                        $body_method .= "\t\t\t\t\$datas['errors'] = 'Veuillez remplir tous les champs suivants : ".str_replace('\'', '', $attr)."'; \n";
                    $body_method .= "\t\t\t} else { \n";                        
                        $body_method .= "\t\t\t\t\$this->model->edit(".trim($args).", \$post); \n";
                        $body_method .= "\t\t\t\tredirect(\"".$dir.$class."/details/".join('/', array_map(function($v){return '$'.$v;}, $pks))."\"); \n";
                    $body_method .= "\t\t\t} \n";
                $body_method .= "\t\t} \n";
                $body_method .= "\t\tcatch(\Exception \$e) { \n";
                    $body_method .= "\t\t\t// Une erreur s'est produite lors de la modification \n";
                    $body_method .= "\t\t\t// Traitements appropriés: var_dump(\$e); \n";
                $body_method .= "\t\t} \n";
            $body_method .= "\t} \n";
        $body_method .= "} \n";
        $body_method .= "\$this->view('update', \$datas)->render(); \n";
        $body_method .= "// Vous pouvez plutot ajouter la view au layout \n";
        $body_method .= "// \$this->layout->add('update', \$datas)->launch(); \n";
            
        $m = (new Method('update'))
            ->setPublic()
            ->addComment("Modification d'un element de la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/update/{".join('/', $pks)."} \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed $'.$pk);
            $params[] = new Parameter($pk);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);
    }
    private function _addUpdateRest(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');
        $attr = trim(join(',', array_map(function($v){if(!empty($v)) return "'$v'"; }, $attrs_without_keys)), ',');

        $body_method  = "\$this->allowed_methods('put')->checkProcess(); \n";
        $body_method .= "\$post = \$this->request->data; \n";
        $body_method .= "try { \n";
            $body_method .= "\tforeach (\$post as \$key => \$value) { \n";
                $body_method .= "\t\tif (!in_array(\$key, [".$attr."])) { unset(\$post[\$key]); } \n";
            $body_method .= "\t} \n";
            $body_method .= "\t\$this->loadLibrary('Checker'); \n";
            $body_method .= "\t\$this->checker->useInputField(true, \$post); \n";
            $body_method .= "\tif (!\$this->checker->inField(".$attr.")) { \n";
                $body_method .= "\t\treturn \$this->response([ \n";
                    $body_method .= "\t\t\t'success' => false, \n";
                    $body_method .= "\t\t\t'message' => 'Veuillez remplir tous les champs suivants : ".str_replace('\'', '', $attr)."' \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t$".$singular_class." = \$this->model->read_pk(".trim($args)."); \n";
            $body_method .= "\tif (empty($".$singular_class.")) { \n";
                $body_method .= "\t\t// Aucun(e) ".$singular_class." correspondant(e) en base de données \n";
                $body_method .= "\t\t// Traitements appropriés \n";
                $body_method .= "\t\treturn \$this->response([ \n";
                    $body_method .= "\t\t\t'success' => false, \n";
                    $body_method .= "\t\t\t'message' => 'Aucun(e) ".$singular_class." ne correspond aux arguments envoyés. Verifier ".trim($args)."' \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t// Element trouvé \n";
            $body_method .= "\t// Traitements appropriés \n";
            $body_method .= "\t\$this->model->edit(".trim($args).", \$post); \n";
            $body_method .= "\treturn \$this->response([ \n";
                $body_method .= "\t\t'success' => true, \n";
                $body_method .= "\t\t'message' => '".$singular_class." modifié(e) avec succès' \n";
            $body_method .= "\t]); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la modification \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
            $body_method .= "\t\$this->send_error(\$e->getMessage(), self::HTTP_INTERNAL_ERROR); \n";
        $body_method .= "} \n";
            
        $m = (new Method('update'))
            ->setPublic()
            ->addComment("Modification d'un element dans la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/update/{".join('/', $pks)."} \n")
            ->addComment("Vous accederez a cette page par la méthode PUT \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed $'.$pk);
            $params[] = new Parameter($pk);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);
    }


    private function addDeleteMethod(ClassType &$generator, array $variables)
    {
        if ($variables['controller_type'] === self::SIMPLE_CONTROLLER)
        {
            $this->_addDeleteSimple($generator, $variables);
        }
        else 
        {
            $this->_addDeleteRest($generator, $variables);
        }
    }
    private function _addDeleteSimple(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');

        $body_method  = "try { \n";
            $body_method .= "\t\$this->model->remove(".trim($args)."); \n";
            $body_method .= "\tredirect('".$dir.$class."'); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la suppression \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
        $body_method .= "} \n";
        $m = (new Method('delete'))
            ->setPublic()
            ->addComment("Suppression d'un element de la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/delete/{".join('/', $pks)."} \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed $'.$pk);
            $params[] = new Parameter($pk);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);

        
        $body_method  = "try { \n";
            $body_method .= "\t\$this->model->clear(); \n";
            $body_method .= "\tredirect('".$dir.$class."'); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la suppression \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
        $body_method .= "} \n";
        $m = (new Method('delete_all'))
            ->setPublic()
            ->addComment("Suppression de tous les elemente de la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/delete-all \n")
            ->setBody($body_method);
        $generator->addMember($m);

    }
    private function _addDeleteRest(ClassType &$generator, array $variables)
    {
        \extract($variables);
        $args = ',';
        foreach ($pks As $pk)
        {
            $args .= ' $'.$pk.',';
        }
        $args = trim($args, ',');
      
        $body_method  = "\$this->allowed_methods('delete')->checkProcess(); \n";
        $body_method .= "try { \n";
            $body_method .= "\t$".$singular_class." = \$this->model->read_pk(".trim($args)."); \n";
            $body_method .= "\tif (empty($".$singular_class.")) { \n";
                $body_method .= "\t\t// Aucun(e) ".$singular_class." correspondant(e) en base de données \n";
                $body_method .= "\t\t// Traitements appropriés \n";
                $body_method .= "\t\treturn \$this->response([ \n";
                    $body_method .= "\t\t\t'success' => false, \n";
                    $body_method .= "\t\t\t'message' => 'Aucun(e) ".$singular_class." ne correspond aux arguments envoyés. Verifier ".trim($args)."' \n";
                $body_method .= "\t\t]); \n";
            $body_method .= "\t} \n";
            $body_method .= "\t// Element trouvé \n";
            $body_method .= "\t// Traitements appropriés \n";
            $body_method .= "\t\$this->model->remove(".trim($args)."); \n";
            $body_method .= "\treturn \$this->response([ \n";
                $body_method .= "\t\t'success' => true, \n";
                $body_method .= "\t\t'message' => '".$singular_class." supprimé(e) avec succès' \n";
            $body_method .= "\t]); \n";
        $body_method .= "} \n";
        $body_method .= "catch(\Exception \$e) { \n";
            $body_method .= "\t// Une erreur s'est produite lors de la modification \n";
            $body_method .= "\t// Traitements appropriés: var_dump(\$e); \n";
            $body_method .= "\t\$this->send_error(\$e->getMessage(), self::HTTP_INTERNAL_ERROR); \n";
        $body_method .= "} \n";
            
        $m = (new Method('delete'))
            ->setPublic()
            ->addComment("Suppression d'un element dans la table ".$class)
            ->addComment("Vous accederez a cette page via l'URL /".$dir.$class."/delete/{".join('/', $pks)."}")
            ->addComment("Vous accederez a cette page par la methode DELETE \n");
        $params = [];
        foreach ($pks As $pk) 
        {
            $m->addComment('@param mixed $'.$pk);
            $params[] = new Parameter($pk);
        }
        $m->setParameters($params)
            ->setBody($body_method);
        $generator->addMember($m);
    }
}
